#include <iostream>
#include <string>
#include <fstream>
using namespace std;
enum ReadingStatus{ NOT_STARTED=0,READING=1,FINISHED=2};
enum PurchaseStatus { OWNED = 0,WISHLIST=1 };
struct Book
{
	
	string title, author;
	ReadingStatus readingStatus;
	PurchaseStatus purchaseStatus;
};
string ReadingStatusString(ReadingStatus rs);
string PurchaseStatusString(PurchaseStatus ps);
void SetBook(Book& book, string title, string author, PurchaseStatus ps, ReadingStatus rs);
void DisplayBook(Book book);
int GetValidInput(int min, int max,string question);
void AddBookMenu(Book books_par[], int& book_count);
void DisplayBookList(Book books_par[], int book_count);
void UpdateBookMenu(Book books_par[],int book_count);
void MainMenu(Book books_par[], int& book_count);
void DisplayStats(Book books_par[], int book_count);
void SaveList(Book books_par[], int book_count);
void LoadList(Book books_par[], int& book_count);
void ExportCsv(Book books_par[], int book_count);
void ExportUnfinishedBooks(Book books_par[], int book_count);
void new_line();
int main()
{
	Book books[100];
	int bookCount = 0;
	LoadList(books, bookCount);
	MainMenu(books, bookCount);


	return 0;
}
string ReadingStatusString(ReadingStatus rs)
{
	if (rs == NOT_STARTED)
		return "Not started";
	else if (rs == READING)
		return "Reading";
	else if (rs == FINISHED)
		return "Finished";
	else
		return "?";
}
string PurchaseStatusString(PurchaseStatus ps)
{
	if (ps == OWNED)
		return "Owned";
	else if (ps == WISHLIST)
		return "Wishlist";
	else
		return "?";

}
void SetBook(Book& book, string title, string author, PurchaseStatus ps, ReadingStatus rs)
{
	book.author = author;
	book.title = title;
	book.purchaseStatus = ps;
	book.readingStatus = rs;
}
void DisplayBook(Book book)
{
	cout << "\nBook: " << book.title << endl
		<< "Author: " << book.author << endl
		<< "Status: " << PurchaseStatusString(book.purchaseStatus) << "," << ReadingStatusString(book.readingStatus) << endl;
}
int GetValidInput(int min, int max, string question)
{
	int choice;
	cout << question;
	cin >> choice;
	while(cin.fail() || choice > max || choice < min)
	{
		if (cin.fail())
		{
			cout << "ERROR ";
			
			cin.clear();
			new_line();
			cout << "Invalid input..." << question;
			cin >> choice;
			
		}
		else if (choice > max || choice < min)
		{
			cout << "Invalid input..." << question;
			cin >> choice;
			

		}
		
		
	}
	new_line();
	return choice;
	
}
void AddBookMenu(Book books_par[], int& book_count)
{
	system("CLS");
	string temp_author, temp_title;
	int temp_ps, temp_rs;
	cout << "Enter a book title: ";
	getline(cin, temp_title);
	cout << "\nEnter the author: ";
	getline(cin, temp_author);
	cout << "Purchase Status:" << endl;
	cout << "\t" << OWNED << ". " << PurchaseStatusString(OWNED) << endl;
	cout << "\t" << WISHLIST << ". " << PurchaseStatusString(WISHLIST) << endl;
	string purchaseQuery = "Enter the purchace status: ";
	temp_ps = GetValidInput(OWNED, WISHLIST,purchaseQuery);
	cout << "\t" << NOT_STARTED << ". " << ReadingStatusString(NOT_STARTED) << endl;
	cout << "\t" << READING << ". " << ReadingStatusString(READING) << endl;
	cout << "\t" << FINISHED << ". " << ReadingStatusString(FINISHED) << endl;
	temp_rs = GetValidInput(NOT_STARTED,FINISHED,purchaseQuery);

	SetBook(books_par[book_count], temp_title, temp_author, (PurchaseStatus)temp_ps, (ReadingStatus)temp_rs);
	book_count++;
}
void DisplayBookList(Book books_par[], int book_count)
{
	for (int i = 0; i < book_count; i++)
	{
		cout << i << ". ";
		DisplayBook(books_par[i]);
	}
}
void UpdateBookMenu(Book books_par[], int book_count)
{
	
	string update_title, update_author;
	int update_ps, update_rs;
	DisplayBookList(books_par, book_count);
	string updateChoice = "Select the number of the book you would like to update: ";
	int index = GetValidInput(0, book_count - 1, updateChoice);
	update_title = books_par[index].title;
	update_author = books_par[index].author;
	update_ps = books_par[index].purchaseStatus;
	update_rs = books_par[index].readingStatus;

	
	string updateMenu = "Enter choice to update book parameter: ";
	int choice;
	string rsQuery = "Enter a new reading status: ";
	string psQuery = "Enter a new purchace status: ";
	do
	{
		cout << "1. Update title\n"
			<< "2. Update author\n"
			<< "3. Update purchace status\n"
			<< "4. Update reading status\n"
			<< "5. Done\n" << endl;
		choice = GetValidInput(1, 5, updateMenu);
		switch (choice)
		{
		case 1:
		
			system("CLS");
			cout << "Enter a new title: ";
			getline(cin, update_title);
			break;
		
		case 2:
		
			system("CLS");
			cout << "Enter a new author: ";
			getline(cin, update_author);
			break;
		
		case 3:
		
			system("CLS");
			cout << "\t" << OWNED << ". " << PurchaseStatusString(OWNED) << endl;
			cout << "\t" << WISHLIST << ". " << PurchaseStatusString(WISHLIST) << endl;
			update_ps = GetValidInput(OWNED, WISHLIST, psQuery);
			break;
		
		case 4:
		
			system("CLS");
			cout << "\t" << NOT_STARTED << ". " << ReadingStatusString(NOT_STARTED) << endl;
			cout << "\t" << READING << ". " << ReadingStatusString(READING) << endl;
			cout << "\t" << FINISHED << ". " << ReadingStatusString(FINISHED) << endl;
			update_rs = GetValidInput(NOT_STARTED, FINISHED, rsQuery);
			break;
		
		}

	} while (choice != 5);
	SetBook(books_par[index], update_title, update_author, (PurchaseStatus)update_ps, (ReadingStatus)update_rs);
	
}
void MainMenu(Book books_par[], int& book_count)
{
	
	int choice;
	do {
		
		cout << "Welcome to your book list.\n"
			<< "=========================\n"
			<< "\t1. Add book\n"
			<< "\t2. Update book\n"
			<< "\t3. Display book list\n"
			<< "\t4. Display total stats\n"
			<< "\t5. Save\n"
			<< "\t6. Load\n"
			<< "\t7. Export books list to CSV file\n"
			<< "\t8. Export unread books list to CSV file\n"
			<< "\t9. Quit" << endl;
		choice = GetValidInput(1, 9, "What would you like to do?");
		switch (choice)
		{
		case 1:
			system("CLS");
			AddBookMenu(books_par, book_count);
			break;
		case 2:
			system("CLS");
			UpdateBookMenu(books_par, book_count);
			break;
		case 3:
			system("CLS");
			DisplayBookList(books_par, book_count);
			break;
		case 4:
			system("CLS");
			DisplayStats(books_par, book_count);
			break;
		case 5:
			system("CLS");
			SaveList(books_par, book_count);
			cout << "File saved.. ";
			system("PAUSE");
			break;
		case 6:
			system("CLS");
			LoadList(books_par, book_count);
			cout << "File loaded successfully! ";
			system("PAUSE");
			break;
		case 7:
			system("CLS");
			ExportCsv(books_par, book_count);
			cout << "Export success! ";
			system("PAUSE");
			break;
		case 8:
			system("CLS");
			ExportUnfinishedBooks(books_par, book_count);
			cout << "Export success! ";
			system("PAUSE");
			break;
		case 9:
			system("CLS");
			cout << "\nAre you sure you want to quit? \n";
			system("PAUSE");
			break;
			
		}
	} while (choice != 9);
}
void DisplayStats(Book books_par[], int book_count)
{
	int totalFinished=0, totalReading=0, totalUnstarted=0;
	for (int i = 0; i < book_count; i++)
	{
		if (books_par[i].readingStatus == NOT_STARTED)
			totalUnstarted++;
		else if (books_par[i].readingStatus == READING)
			totalReading++;
		else if (books_par[i].readingStatus == FINISHED)
			totalFinished++;
	}
	system("CLS");
	cout << "\t\t" << "TOTAL BOOKS == " << book_count << endl;
	cout << "\t" << NOT_STARTED << ". " << ReadingStatusString(NOT_STARTED) << ": " << totalUnstarted << endl;
	cout << "\t" << READING << ". " << ReadingStatusString(READING) << ": " << totalReading << endl;
	cout << "\t" << FINISHED << ". " << ReadingStatusString(FINISHED) << ": " << totalFinished << endl;
}
void new_line()
{
	char symbol;
	do {
		cin.get(symbol);
	} while (symbol != '\n');
}
void SaveList(Book books_par[], int book_count)
{
	ofstream output;
	output.open("booklist.txt");
	if(output.fail())
	{
		cout << "ERROR opening save file";
		exit(1);
	}
	for (int i = 0; i < book_count; i++)
	{
		output << "BOOK_" << i << "\n"
			<< books_par[i].title << "\n"
			<< books_par[i].author << "\n"
			<< books_par[i].purchaseStatus << "\n"
			<< books_par[i].readingStatus << endl;
	}
	output.close();
}
void LoadList(Book books_par[], int& book_count)
{
	ifstream input;
	input.open("booklist.txt");
	if (input.fail())
	{
		cout << "Error opening save file...continue?(y/n): ";
		char ans;
		cin >> ans;
		while (!tolower(ans) == 'y' || !tolower(ans) == 'n')
		{
			cout << "Invalid response...continue?(y/n): ";
			cin >> ans;
		}
		if (tolower(ans) == 'y')
		{
			new_line();
			return;
		}
		else if (tolower(ans) == 'n')
		{
			new_line();
			exit(1);
		}
	}
	book_count = 0;
	string title, status, author, buffer;
	int rstatus, pstatus;
	while (input >> buffer)
	{
		input.ignore();
		getline(input, title);
		getline(input, author);
		input >> pstatus;
		input >> rstatus;
		books_par[book_count].title = title;
		books_par[book_count].author = author;
		books_par[book_count].purchaseStatus = (PurchaseStatus)pstatus;
		books_par[book_count].readingStatus = (ReadingStatus)rstatus;
		book_count++;
	}
	input.close();

}
void ExportCsv(Book books_par[], int book_count)
{
	ofstream output("booklist.csv");
	if (output.fail())
	{
		cout << "Error opening file..quitting";
		exit(1);
	}
	output << "TITLE,AUTHOR,READING?,OWNED?" << endl;
	for (int i = 0; i < book_count; i++)
	{
		output << books_par[i].title << ","
			<< books_par[i].author << ","
			<< ReadingStatusString(books_par[i].readingStatus) << ","
			<< PurchaseStatusString(books_par[i].purchaseStatus) << ","
			<< endl;
	}
	output.close();
}
void ExportUnfinishedBooks(Book books_par[], int book_count)
{
	ofstream output("unfinishedBooks.csv");
	if (output.fail())
	{
		cout << "Error opening file..";
		exit(1);
	}
	output << "TITLE,AUTHOR,READING?,OWNED?" << endl;
	for (int i = 0; i < book_count; i++)
	{
		if (books_par[i].readingStatus == 0 || books_par[i].readingStatus == 1)
		{
			output << books_par[i].title << ","
				<< books_par[i].author << ","
				<< ReadingStatusString(books_par[i].readingStatus) << ","
				<< PurchaseStatusString(books_par[i].purchaseStatus) << ","
				<< endl;
		}
	}
	output.close();
}
